{"ast":null,"code":"var _jsxFileName = \"/Users/pascalstoppelkamp/develop/React/marktabfrage/src/components/Main/ShowAbfragen/index.js\";\nimport React, { Component } from 'react';\nimport { Button, Box } from '@material-ui/core';\nimport { ChevronRightOutlined } from '@material-ui/icons';\nimport ServerUtils from '../../../utils/ServerUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    height: '100%'\n  },\n  btnBox: {\n    display: 'flex',\n    flex: 1,\n    flexWrap: 'wrap'\n  },\n  chevron: {\n    flex: 0.1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n};\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showData = async fnb => {\n      const cookieValue = document.cookie;\n      let body = {\n        FNB: fnb,\n        headers: {\n          authorization: cookieValue\n        }\n      };\n      const response = await this.ServerUtils.showAbfragen(body);\n\n      if (response.success) {\n        this.setState({\n          data: response.data\n        });\n      }\n    };\n\n    this.pressedContact = (item, index) => {\n      this.changeColor(index);\n      this.setState({\n        pressedData: item\n      });\n    };\n\n    this.changeColor = index => {\n      let btnContainerBG = {};\n      let clicked = 'lightgrey';\n      let unPressed = 'white';\n      btnContainerBG[index] === clicked ? btnContainerBG[index] = unPressed : btnContainerBG[index] = clicked;\n      this.setState({\n        btnContainerBG\n      });\n    };\n\n    this.getItems = (item, index) => {\n      let {\n        btnContainerBG\n      } = this.state;\n      let {\n        Name,\n        Email,\n        CompanyContact\n      } = item;\n      return /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          height: 100,\n          borderColor: 'lightgreen',\n          borderStyle: 'solid',\n          backgroundColor: btnContainerBG[index],\n          margin: 20,\n          borderWidth: 0.5,\n          borderRadius: 10,\n          overflow: 'hidden'\n        },\n        onClick: () => this.pressedContact(item, index),\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          style: styles.btnBox,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              flex: 1\n            },\n            children: 'Name: ' + Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              flex: 1\n            },\n            children: 'Email: ' + Email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              flex: 1\n            },\n            children: 'Ansprechpartner: ' + CompanyContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          style: styles.chevron,\n          children: /*#__PURE__*/_jsxDEV(ChevronRightOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.pressedData = data => {\n      let arr = [];\n\n      for (const [key, value] of Object.entries(data)) {\n        if (typeof value === 'object') {\n          for (const [tkey, val] of Object.entries(value)) {\n            arr.push({\n              name: tkey,\n              value: JSON.stringify(val)\n            });\n          }\n        }\n\n        if (typeof value !== 'object' && key !== '_id' && key !== '__v') {\n          arr.push({\n            name: key,\n            value: value\n          });\n        }\n      }\n\n      return arr;\n    };\n\n    this.ServerUtils = new ServerUtils();\n    this.state = {\n      data: [],\n      pressedData: null,\n      btnContainerBG: []\n    };\n  }\n\n  componentDidMount() {\n    let {\n      fnb\n    } = this.props;\n    this.showData(fnb);\n  }\n\n  render() {\n    let {\n      data,\n      pressedData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          height: '100vh'\n        },\n        children: data.map((item, index) => this.getItems(item, index))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          flex: 1,\n          margin: 20,\n          width: '60%',\n          overflow: 'hidden'\n        },\n        children: pressedData ? this.pressedData(pressedData).map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [item.name, \" : \", item.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/pascalstoppelkamp/develop/React/marktabfrage/src/components/Main/ShowAbfragen/index.js"],"names":["React","Component","Button","Box","ChevronRightOutlined","ServerUtils","styles","container","display","flexDirection","height","btnBox","flex","flexWrap","chevron","justifyContent","index","constructor","props","showData","fnb","cookieValue","document","cookie","body","FNB","headers","authorization","response","showAbfragen","success","setState","data","pressedContact","item","changeColor","pressedData","btnContainerBG","clicked","unPressed","getItems","state","Name","Email","CompanyContact","borderColor","borderStyle","backgroundColor","margin","borderWidth","borderRadius","overflow","arr","key","value","Object","entries","tkey","val","push","name","JSON","stringify","componentDidMount","render","map","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,aAAa,EAAE,KAFN;AAGTC,IAAAA,MAAM,EAAE;AAHC,GADE;AAMbC,EAAAA,MAAM,EAAE;AACNH,IAAAA,OAAO,EAAE,MADH;AAENI,IAAAA,IAAI,EAAE,CAFA;AAGNC,IAAAA,QAAQ,EAAE;AAHJ,GANK;AAWbC,EAAAA,OAAO,EAAE;AACPF,IAAAA,IAAI,EAAE,GADC;AAEPJ,IAAAA,OAAO,EAAE,MAFF;AAGPO,IAAAA,cAAc,EAAE;AAHT;AAXI,CAAf;AAkBA,eAAe,MAAMC,KAAN,SAAoBf,SAApB,CAA8B;AAC3CgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAcnBC,QAdmB,GAcR,MAAOC,GAAP,IAAe;AACxB,YAAMC,WAAW,GAAGC,QAAQ,CAACC,MAA7B;AACA,UAAIC,IAAI,GAAG;AACTC,QAAAA,GAAG,EAAEL,GADI;AAETM,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEN;AADR;AAFA,OAAX;AAMA,YAAMO,QAAQ,GAAG,MAAM,KAAKvB,WAAL,CAAiBwB,YAAjB,CAA8BL,IAA9B,CAAvB;;AACA,UAAII,QAAQ,CAACE,OAAb,EAAsB;AACpB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,IAAI,EAAEJ,QAAQ,CAACI;AAAjB,SAAd;AACD;AACF,KA1BkB;;AAAA,SA4BnBC,cA5BmB,GA4BF,CAACC,IAAD,EAAOlB,KAAP,KAAiB;AAChC,WAAKmB,WAAL,CAAiBnB,KAAjB;AACA,WAAKe,QAAL,CAAc;AAAEK,QAAAA,WAAW,EAAEF;AAAf,OAAd;AACD,KA/BkB;;AAAA,SAiCnBC,WAjCmB,GAiCJnB,KAAD,IAAW;AACvB,UAAIqB,cAAc,GAAG,EAArB;AACA,UAAIC,OAAO,GAAG,WAAd;AACA,UAAIC,SAAS,GAAG,OAAhB;AACAF,MAAAA,cAAc,CAACrB,KAAD,CAAd,KAA0BsB,OAA1B,GACKD,cAAc,CAACrB,KAAD,CAAd,GAAwBuB,SAD7B,GAEKF,cAAc,CAACrB,KAAD,CAAd,GAAwBsB,OAF7B;AAGA,WAAKP,QAAL,CAAc;AAAEM,QAAAA;AAAF,OAAd;AACD,KAzCkB;;AAAA,SA2CnBG,QA3CmB,GA2CR,CAACN,IAAD,EAAOlB,KAAP,KAAiB;AAC1B,UAAI;AAAEqB,QAAAA;AAAF,UAAqB,KAAKI,KAA9B;AACA,UAAI;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,KAAR;AAAeC,QAAAA;AAAf,UAAkCV,IAAtC;AACA,0BACE,QAAC,MAAD;AACE,QAAA,KAAK,EAAE;AACLxB,UAAAA,MAAM,EAAE,GADH;AAELmC,UAAAA,WAAW,EAAE,YAFR;AAGLC,UAAAA,WAAW,EAAE,OAHR;AAILC,UAAAA,eAAe,EAAEV,cAAc,CAACrB,KAAD,CAJ1B;AAKLgC,UAAAA,MAAM,EAAE,EALH;AAMLC,UAAAA,WAAW,EAAE,GANR;AAOLC,UAAAA,YAAY,EAAE,EAPT;AAQLC,UAAAA,QAAQ,EAAE;AARL,SADT;AAWE,QAAA,OAAO,EAAE,MAAM,KAAKlB,cAAL,CAAoBC,IAApB,EAA0BlB,KAA1B,CAXjB;AAAA,gCAaE,QAAC,GAAD;AAAK,UAAA,KAAK,EAAEV,MAAM,CAACK,MAAnB;AAAA,kCACE;AAAG,YAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAV;AAAA,sBAAwB,WAAW8B;AAAnC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,KAAK,EAAE;AAAE9B,cAAAA,IAAI,EAAE;AAAR,aAAV;AAAA,sBAAwB,YAAY+B;AAApC;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAG,YAAA,KAAK,EAAE;AAAE/B,cAAAA,IAAI,EAAE;AAAR,aAAV;AAAA,sBAAwB,sBAAsBgC;AAA9C;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAkBE,QAAC,GAAD;AAAK,UAAA,KAAK,EAAEtC,MAAM,CAACQ,OAAnB;AAAA,iCACE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAwBD,KAtEkB;;AAAA,SAwEnBsB,WAxEmB,GAwEJJ,IAAD,IAAU;AACtB,UAAIoB,GAAG,GAAG,EAAV;;AACA,WAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAexB,IAAf,CAA3B,EAAiD;AAC/C,YAAI,OAAOsB,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAK,MAAM,CAACG,IAAD,EAAOC,GAAP,CAAX,IAA0BH,MAAM,CAACC,OAAP,CAAeF,KAAf,CAA1B,EAAiD;AAC/CF,YAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,cAAAA,IAAI,EAAEH,IADC;AAEPH,cAAAA,KAAK,EAAEO,IAAI,CAACC,SAAL,CAAeJ,GAAf;AAFA,aAAT;AAID;AACF;;AAED,YAAI,OAAOJ,KAAP,KAAiB,QAAjB,IAA6BD,GAAG,KAAK,KAArC,IAA8CA,GAAG,KAAK,KAA1D,EAAiE;AAC/DD,UAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,YAAAA,IAAI,EAAEP,GADC;AAEPC,YAAAA,KAAK,EAAEA;AAFA,WAAT;AAID;AACF;;AACD,aAAOF,GAAP;AACD,KA5FkB;;AAEjB,SAAK/C,WAAL,GAAmB,IAAIA,WAAJ,EAAnB;AACA,SAAKoC,KAAL,GAAa;AACXT,MAAAA,IAAI,EAAE,EADK;AAEXI,MAAAA,WAAW,EAAE,IAFF;AAGXC,MAAAA,cAAc,EAAE;AAHL,KAAb;AAKD;;AACD0B,EAAAA,iBAAiB,GAAG;AAClB,QAAI;AAAE3C,MAAAA;AAAF,QAAU,KAAKF,KAAnB;AACA,SAAKC,QAAL,CAAcC,GAAd;AACD;;AAkFD4C,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEhC,MAAAA,IAAF;AAAQI,MAAAA;AAAR,QAAwB,KAAKK,KAAjC;AACA,wBACE,QAAC,GAAD;AAAK,MAAA,KAAK,EAAEnC,MAAM,CAACC,SAAnB;AAAA,8BACE,QAAC,GAAD;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE,MADJ;AAELC,UAAAA,aAAa,EAAE,QAFV;AAGLG,UAAAA,IAAI,EAAE,CAHD;AAILF,UAAAA,MAAM,EAAE;AAJH,SADT;AAAA,kBAQGsB,IAAI,CAACiC,GAAL,CAAS,CAAC/B,IAAD,EAAOlB,KAAP,KAAiB,KAAKwB,QAAL,CAAcN,IAAd,EAAoBlB,KAApB,CAA1B;AARH;AAAA;AAAA;AAAA;AAAA,cADF,eAYE,QAAC,GAAD;AAAK,QAAA,KAAK,EAAE;AAAEJ,UAAAA,IAAI,EAAE,CAAR;AAAWoC,UAAAA,MAAM,EAAE,EAAnB;AAAuBkB,UAAAA,KAAK,EAAE,KAA9B;AAAqCf,UAAAA,QAAQ,EAAE;AAA/C,SAAZ;AAAA,kBACGf,WAAW,GACR,KAAKA,WAAL,CAAiBA,WAAjB,EAA8B6B,GAA9B,CAAmC/B,IAAD,iBAChC;AAAA,qBACGA,IAAI,CAAC0B,IADR,SACiB1B,IAAI,CAACoB,KADtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADQ,GAMR;AAPN;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD;;AAzH0C","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Box } from '@material-ui/core';\nimport { ChevronRightOutlined } from '@material-ui/icons';\nimport ServerUtils from '../../../utils/ServerUtils';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    height: '100%',\n  },\n  btnBox: {\n    display: 'flex',\n    flex: 1,\n    flexWrap: 'wrap',\n  },\n  chevron: {\n    flex: 0.1,\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n};\n\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n    this.ServerUtils = new ServerUtils();\n    this.state = {\n      data: [],\n      pressedData: null,\n      btnContainerBG: [],\n    };\n  }\n  componentDidMount() {\n    let { fnb } = this.props;\n    this.showData(fnb);\n  }\n\n  showData = async (fnb) => {\n    const cookieValue = document.cookie;\n    let body = {\n      FNB: fnb,\n      headers: {\n        authorization: cookieValue,\n      },\n    };\n    const response = await this.ServerUtils.showAbfragen(body);\n    if (response.success) {\n      this.setState({ data: response.data });\n    }\n  };\n\n  pressedContact = (item, index) => {\n    this.changeColor(index);\n    this.setState({ pressedData: item });\n  };\n\n  changeColor = (index) => {\n    let btnContainerBG = {};\n    let clicked = 'lightgrey';\n    let unPressed = 'white';\n    btnContainerBG[index] === clicked\n      ? (btnContainerBG[index] = unPressed)\n      : (btnContainerBG[index] = clicked);\n    this.setState({ btnContainerBG });\n  };\n\n  getItems = (item, index) => {\n    let { btnContainerBG } = this.state;\n    let { Name, Email, CompanyContact } = item;\n    return (\n      <Button\n        style={{\n          height: 100,\n          borderColor: 'lightgreen',\n          borderStyle: 'solid',\n          backgroundColor: btnContainerBG[index],\n          margin: 20,\n          borderWidth: 0.5,\n          borderRadius: 10,\n          overflow: 'hidden',\n        }}\n        onClick={() => this.pressedContact(item, index)}\n      >\n        <Box style={styles.btnBox}>\n          <p style={{ flex: 1 }}>{'Name: ' + Name}</p>\n          <p style={{ flex: 1 }}>{'Email: ' + Email}</p>\n          <p style={{ flex: 1 }}>{'Ansprechpartner: ' + CompanyContact}</p>\n        </Box>\n        <Box style={styles.chevron}>\n          <ChevronRightOutlined />\n        </Box>\n      </Button>\n    );\n  };\n\n  pressedData = (data) => {\n    let arr = [];\n    for (const [key, value] of Object.entries(data)) {\n      if (typeof value === 'object') {\n        for (const [tkey, val] of Object.entries(value)) {\n          arr.push({\n            name: tkey,\n            value: JSON.stringify(val),\n          });\n        }\n      }\n\n      if (typeof value !== 'object' && key !== '_id' && key !== '__v') {\n        arr.push({\n          name: key,\n          value: value,\n        });\n      }\n    }\n    return arr;\n  };\n\n  render() {\n    let { data, pressedData } = this.state;\n    return (\n      <Box style={styles.container}>\n        <Box\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            flex: 1,\n            height: '100vh',\n          }}\n        >\n          {data.map((item, index) => this.getItems(item, index))}\n        </Box>\n\n        <Box style={{ flex: 1, margin: 20, width: '60%', overflow: 'hidden' }}>\n          {pressedData\n            ? this.pressedData(pressedData).map((item) => (\n                <p>\n                  {item.name} : {item.value}\n                </p>\n              ))\n            : null}\n        </Box>\n      </Box>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}